/*
 * Matrix Client-Server Client Config API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.matrix.client;

import org.matrix.client.ApiException;
import org.matrix.client.api.DeviceManagementApi;
import org.matrix.client.model.AuthResponse;
import org.matrix.client.model.ClientDevice;
import org.matrix.client.model.DeviceDeleteRequest;
import org.matrix.client.model.DeviceUpdateRequest;
import org.matrix.client.model.DevicesResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeviceManagementApi
 */
@Ignore
public class DeviceManagementApiTest extends ApiTestBase {

    private final DeviceManagementApi api = new DeviceManagementApi(authClient);

    
    /**
     * Delete a device
     *
     * This API endpoint uses the &#x60;User-Interactive Authentication API&#x60;_.  Deletes the given device, and invalidates any access token assoicated with it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    public void deleteDeviceTest() throws ApiException {
        String deviceId = null;
        DeviceDeleteRequest body = null;
        Object response = api.deleteDevice(deviceId, body);

        // TODO: test validations
    }
    
    /**
     * Get a single device
     *
     * Gets information on a single device, by device id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        ClientDevice response = api.getDevice(login.getDeviceId());
        System.out.print("getDevice(): " + response);
    }
    
    /**
     * List registered devices for the current user
     *
     * Gets information about all devices for the current user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDevicesTest() throws ApiException {
        DevicesResponse response = api.getDevices();
        System.out.print("getDevices(): " + response);
    }
    
    /**
     * Update a device
     *
     * Updates the metadata on the given device.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String deviceId = login.getDeviceId();
        DeviceUpdateRequest updateRequest = new DeviceUpdateRequest();
        updateRequest.setDisplayName("KUKU");
        Object response = api.updateDevice(deviceId, updateRequest);
        System.out.println("updateDevice(): " + response);
    }
    
}
